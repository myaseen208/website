)
remotes::update_packages()
?update_packages
update_packages(
packages        = c(TRUE, FALSE)[1]
, dependencies    = c(TRUE, FALSE, NA)[1]
, upgrade         = c("default", "ask", "always", "never")[4]
, force           = c(TRUE, FALSE)[1]
, quiet           = c(TRUE, FALSE)[1]
, build           = c(TRUE, FALSE)[1]
, build_opts      = c("--no-resave-data", "--no-manual", "--no-build-vignettes")
, build_manual    = c(TRUE, FALSE)[2]
, build_vignettes = c(TRUE, FALSE)[2]
, repos           = getOption("repos")
, type            = getOption("pkgType")
)
library(remotes)
remotes::update_packages(
packages        = c(TRUE, FALSE)[1]
, dependencies    = c(TRUE, FALSE, NA)[1]
, upgrade         = c("default", "ask", "always", "never")[4]
, force           = c(TRUE, FALSE)[1]
, quiet           = c(TRUE, FALSE)[1]
, build           = c(TRUE, FALSE)[1]
, build_opts      = c("--no-resave-data", "--no-manual", "--no-build-vignettes")
, build_manual    = c(TRUE, FALSE)[2]
, build_vignettes = c(TRUE, FALSE)[2]
, repos           = getOption("repos")
, type            = getOption("pkgType")
)
remotes::update_packages(
packages        = c(TRUE, FALSE)[1]
, dependencies    = c(TRUE, FALSE, NA)[1]
, upgrade         = c("default", "ask", "always", "never")[4]
, force           = c(TRUE, FALSE)[2]
, quiet           = c(TRUE, FALSE)[1]
, build           = c(TRUE, FALSE)[1]
, build_opts      = c("--no-resave-data", "--no-manual", "--no-build-vignettes")
, build_manual    = c(TRUE, FALSE)[2]
, build_vignettes = c(TRUE, FALSE)[2]
, repos           = getOption("repos")
, type            = getOption("pkgType")
)
remotes::update_packages(
packages        = c(TRUE, FALSE)[1]
, dependencies    = c(TRUE, FALSE, NA)[1]
, upgrade         = c("default", "ask", "always", "never")[4]
, force           = c(TRUE, FALSE)[2]
, quiet           = c(TRUE, FALSE)[2]
, build           = c(TRUE, FALSE)[1]
, build_opts      = c("--no-resave-data", "--no-manual", "--no-build-vignettes")
, build_manual    = c(TRUE, FALSE)[2]
, build_vignettes = c(TRUE, FALSE)[2]
, repos           = getOption("repos")
, type            = getOption("pkgType")
)
remotes::update_packages(
packages        = c(TRUE, FALSE)[1]
, dependencies    = c(TRUE, FALSE, NA)[1]
, upgrade         = c("default", "ask", "always", "never")[1]
, force           = c(TRUE, FALSE)[2]
, quiet           = c(TRUE, FALSE)[2]
, build           = c(TRUE, FALSE)[1]
, build_opts      = c("--no-resave-data", "--no-manual", "--no-build-vignettes")
, build_manual    = c(TRUE, FALSE)[2]
, build_vignettes = c(TRUE, FALSE)[2]
, repos           = getOption("repos")
, type            = getOption("pkgType")
)
library(future)
plan(multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[2]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = TRUE)
)
library(pak)
pkg_install("rsvg")
install.packages("rsvg")
pkg_install("ropensci/rsvg")
library(remotes)
install_github("ropensci/rsvg")
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[2]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = TRUE)
)
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = TRUE)
)
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = TRUE)
)
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = TRUE)
)
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = TRUE)
)
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = TRUE)
)
library(future)
plan(multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = TRUE)
)
install.packages("rsvg")
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
pkg_install("openxlsx")
pkg_install("ragg")
pkg_install("rsvg")
install.packages("rsvg")
pkg_install("rsvg")
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
install.packages("rsvg")
library(future)
plan(multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
# update.packages(ask = FALSE)
# update.packages(oldP = old.packages(), ask = FALSE)
library(pacman)
# p_up(update = TRUE, ask = FALSE)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
library(rsvg)
library(future)
plan(multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
# update.packages(ask = FALSE)
# update.packages(oldP = old.packages(), ask = FALSE)
library(pacman)
# p_up(update = TRUE, ask = FALSE)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
getwd()
library(future)
plan(multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "spatial")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
pkg_install(c("spatstat.explore", "spatstat.linnet", "spatstat"))
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "spatial")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
library(ggplot2)
?ggplot
?facet_grid
library(ggplot2)
?ggplot
?facet_wrap
getwd()
library(future)
plan(multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
pkg_install("contingencytables")
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "spatial")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
library(future)
plan(multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "spatial")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
pkg_install("blogdown")
# rm(list = ls())
setwd("D:/MYaseen208_B0-22-7A-E9-23-9B/Consultancy/Mr._M._Yaseen/01Website/website")
getwd()
library(blogdown)
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build()
# rm(list = ls())
setwd("D:/MYaseen208_B0-22-7A-E9-23-9B/Consultancy/Mr._M._Yaseen/01Website/website")
getwd()
library(blogdown)
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build()
# Creating New Post
blogdown::new_post(
title      = "ppcSpatial: Spatial Analysis of Pakistan Population Census"
, kind       = "default"
, open       = interactive()
, author     = "Muhammad Yaseen"
, categories = c("R", "ppcSpatial", "Pakistan Population Census 2017")
, tags       = NULL
, date       = Sys.Date()
, file       = "myaseen208/ppcSpatialBlog1.md"
, slug       = NULL
, title_case = getOption("blogdown.title_case")
, subdir     = getOption("blogdown.subdir", "myaseen208")
, ext        = getOption("blogdown.ext", ".md")
)
# rm(list = ls())
setwd("D:/MYaseen208_B0-22-7A-E9-23-9B/Consultancy/Mr._M._Yaseen/01Website/website")
getwd()
library(blogdown)
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build()
