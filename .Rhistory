pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = TRUE)
)
install.packages("rsvg")
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
pkg_install("openxlsx")
pkg_install("ragg")
pkg_install("rsvg")
install.packages("rsvg")
pkg_install("rsvg")
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
install.packages("rsvg")
library(future)
plan(multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
# update.packages(ask = FALSE)
# update.packages(oldP = old.packages(), ask = FALSE)
library(pacman)
# p_up(update = TRUE, ask = FALSE)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
library(rsvg)
library(future)
plan(multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
# update.packages(ask = FALSE)
# update.packages(oldP = old.packages(), ask = FALSE)
library(pacman)
# p_up(update = TRUE, ask = FALSE)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "nnet", "spatial", "rsvg")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
getwd()
library(future)
plan(multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "spatial")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
pkg_install(c("spatstat.explore", "spatstat.linnet", "spatstat"))
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %!in% c("class", "spatial")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
library(ggplot2)
?ggplot
?facet_grid
library(ggplot2)
?ggplot
?facet_wrap
getwd()
library(future)
plan(multisession)
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %notin% c("class", "spatial")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
library(jsonlite)
library(lubridate)
pkg_install("rtweet")
library(future)
plan(strategy = c(multiprocess, multisession)[2])
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
# update.packages(ask = FALSE)
# update.packages(oldP = old.packages(), ask = FALSE)
library(pacman)
# p_up(update = TRUE, ask = FALSE)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %notin% c("class", "spatial")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
pkg_install("lwgeom")
install.packages("lwgeom")
library(future)
plan(strategy = c(multiprocess, multisession)[2])
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt2
dt12 <-
inner_join.(dt1, dt2) |>
qDT() |>
funique()
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %notin% c("class", "spatial", "rsvg", "terra")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
library(pdftools)
library(future)
plan(strategy = c(multiprocess, multisession)[2])
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package) |>
roworder(Package)
library(future)
plan(strategy = c(multiprocess, multisession)[2])
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(dtupdate)
github_update(
auto.install = c(FALSE, TRUE)[2]
, ask          = c(FALSE, TRUE)[1]
, widget       = c(FALSE, TRUE)[1]
, dependencies = c(FALSE, TRUE)[2]
, libpath      = .libPaths()[1]
)
library(pak)
library(tidyverse)
library(tidytable)
library(fastverse)
library(pkgdepends)
dt1 <-
installed.packages() |>
qDT() |>
fselect(Package, InstalledVersion = Version) |>
roworder(Package)
dt1
dt2 <-
tools::CRAN_package_db() |>
qDT() |>
fselect(Package, CRANVersion = Version) |>
roworder(Package)
dt2
dt12 <-
left_join.(dt1, dt2, by = "Package") |>
qDT() |>
fsubset(InstalledVersion != CRANVersion) |>
funique() |>
fmutate(
InstalledVersion = str_remove_all(string = InstalledVersion, pattern = "\\.|-") |>
parse_number()
, CRANVersion      = str_remove_all(string = CRANVersion, pattern = "\\.|-") |>
parse_number()
) |>
fsubset(InstalledVersion < CRANVersion)
dt12
pkg_install(
pkg          = dt12 |>
fsubset(Package %notin% c("class", "spatial", "terra")) |>
pull.(Package) |>
dput()
, upgrade      = c(TRUE, FALSE)[1]
, ask          = c(TRUE, FALSE)[2]
, dependencies = as_pkg_dependencies(deps = c(TRUE, FALSE)[1])
)
library(future)
plan(strategy = c(multiprocess, multisession)[2])
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(dtupdate)
github_update(
auto.install = c(FALSE, TRUE)[2]
, ask          = c(FALSE, TRUE)[1]
, widget       = c(FALSE, TRUE)[1]
, dependencies = c(FALSE, TRUE)[2]
, libpath      = .libPaths()[1]
)
pak::pkg_install(
pkg = "rspatial/terra"
, ask = FALSE
)
library(pak)
# rm(list = ls())
setwd("D:/MYaseen208_B0-22-7A-E9-23-9B/Consultancy/Mr._M._Yaseen/01Website/website")
getwd()
library(blogdown)
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build()
blogdown::serve_site()
blogdown::stop_server()
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build()
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build()
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build()
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build()
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build()
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build()
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
# Removing public directory
unlink(x = "public", recursive = TRUE, force = FALSE)
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build()
library(future)
plan(strategy = c(multiprocess, multisession)[2])
library(doParallel)
library(foreach)
Clusters <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(Clusters)
options(Ncpus = detectCores() - 1, mc.cores = detectCores() - 1, scipen = 999)
library(pacman)
library(dtupdate)
pkg_install("rdrobust")
library(rdrobust)
library(help = rdrobust)
?rdplot
x<-runif(1000,-1,1)
y<-5+3*x+2*(x>=0)+rnorm(1000)
rdplot(y,x)
library(dtupdate)
github_update(
auto.install = c(FALSE, TRUE)[2]
, ask          = c(FALSE, TRUE)[1]
, widget       = c(FALSE, TRUE)[1]
, dependencies = c(FALSE, TRUE)[2]
, libpath      = .libPaths()[1]
)
library(pdftools)
library(pdftools)
?pdf_convert
library(magick)
